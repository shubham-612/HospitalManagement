package com.cg.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.cg.dto.DoctorDTO;
import com.cg.entity.Doctor;
import com.cg.exception.ResourceNotFoundException;
import com.cg.service.DoctorFallbackService;
import com.cg.service.IDoctorService;

@RestController
@RequestMapping("/doctor")

public class DoctorController {
	
    @Autowired
    private IDoctorService doctorService;
 
    // ------ GET ALL DOCTORS
    @GetMapping("/getall")
    public List<Doctor> getAllDoctors() {
        return doctorService.findAllDoctors();
    }
 
    // ------ DOCTOR DETAILS BY AUTHORIZATION
    @GetMapping("/by/token")
    public List<Doctor> getAllDoctor(@RequestHeader("Authorization") String token)
    {
    	if(doctorService.hasPermission(token))
    		return doctorService.findAllDoctors();
    	else
    		return null;
    }
    
    // ------ GET DOCTOR BY ID
    @GetMapping("/{did}")
    public DoctorDTO getDoctorById(@PathVariable int did) throws ResourceNotFoundException {
        return doctorService.findDoctorById(did)
                .map(DoctorDTO::fromEntity)
                .orElseThrow(() -> new ResourceNotFoundException("Doctor not found for this id :: " + did));
    }
 
    // ------- CREATE NEW DOCTOR
    @PostMapping("/create")
    public ResponseEntity<DoctorDTO> createDoctor(@RequestBody DoctorDTO doctorDTO) {
        try {
            // Convert DTO to entity
            Doctor doctor = doctorDTO.toEntity();
            
            // Create doctor using the service
            Doctor createdDoctor = doctorService.createDoctor(doctor);
            
            // Convert back to DTO and return
            return ResponseEntity.status(HttpStatus.CREATED).body(DoctorDTO.fromEntity(createdDoctor));
        } catch (Exception e) {
            // Log the error (optional)
            System.err.println("Error creating doctor: " + e.getMessage());
            
            // Return a meaningful error response
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(null); // You can return a custom error DTO if needed
        }
    }
 
    // ------ DELETE A DOCTOR
    @DeleteMapping("/delete/{id}")
    public String deleteDoctor(@PathVariable int id) {
        doctorService.deleteDoctor(id);
        return "Doctor with ID " + id + " has been deleted";
    }
 
    // ------ UPDATE DETAILS OF DOCTOR
    @PutMapping("/update/{id}")
    public DoctorDTO updateDoctor(@PathVariable int id, @RequestBody DoctorDTO doctorDTO) throws ResourceNotFoundException {
        // Retrieve the existing doctor from the database
        Doctor existingDoctor = doctorService.findDoctorById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Doctor not found for this id :: " + id));

        // Update the fields of the existing doctor
        existingDoctor.setName(doctorDTO.getName());
        existingDoctor.setQualification(doctorDTO.getQualification());
        // Update other fields as necessary

        // Save the updated doctor
        Doctor updatedDoctor = doctorService.updateDoctor(id,existingDoctor);
        return DoctorDTO.fromEntity(updatedDoctor);
    }
    
//    @PutMapping("/update/{id}")
//    public DoctorDTO updateDoctor(@PathVariable int id, @RequestBody DoctorDTO doctorDTO) {
//        Doctor doctor = doctorDTO.toEntity();
//        Doctor updatedDoctor = doctorService.updateDoctor(id, doctor);
//        return DoctorDTO.fromEntity(updatedDoctor);
//    }
    
//  @PostMapping("/create")
//  public DoctorDTO createDoctor(@RequestBody DoctorDTO doctorDTO) {
//      Doctor doctor = doctorDTO.toEntity();
//      Doctor createdDoctor = doctorService.createDoctor(doctor);
//      return DoctorDTO.fromEntity(createdDoctor);
//  	
//  }
    
    @Autowired
    DoctorFallbackService dfs;
    @GetMapping("/fallback")
    public List<Doctor> getDoctors() {
        return dfs.getAllDoctors();
    }
}
